import tester.Tester;


public class Examples {
	emptyDict<Integer> e = new emptyDict<Integer>();
	emptyDict<String> exEmpty = new emptyDict<String>();
	consDict<String> exCons = new consDict<String>("one", "value", exEmpty);
	void testHasKey(Tester t) {
		t.checkExpect(e.hasKey("blue"), false);
		t.checkExpect(exCons.hasKey("blue"), false);
		t.checkExpect(exCons.hasKey("one"), true);
	}
	
	void testSet(Tester t) {
		t.checkExpect(e.set("one", 1), new consDict<Integer>("one", 1, e));
		t.checkExpect(exCons.set("one", "new value"),
				new consDict<String>("one", "new value", exEmpty));
		t.checkExpect(exCons.set("blue", "new value"), 
				new consDict<String>("blue", "new value", exCons)));
	}
	
	void testLookup(Tester t){
		t.checkExpect(e.lookup("one"));
	}
	
	List<Integer> is = new Cons<Integer>(5);
	List<List<Integer>> iss = new Cons<List<Integer>>(is);
	void testRev(Tester t) {
		// the type safe way to write is.first + 3.
		t.checkExpect(is.accept(new GetFirst()) + 3, 8);
		// How to test exceptional behavior
		/*
	        t.checkException(new RuntimeException("You suck"),
	                         new Empty<Integer>(),
	                         	"accept",
	                         new GetFirst());  
	       */                
		t.checkExpect(is.rev(), is);
	    	}
	
	void testMap(Tester t) {
		t.checkExpect(is.map(new IntToStr()), new Cons<String>("5"));
	    	}
}	
